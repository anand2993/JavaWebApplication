# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  HELM_VERSION: 'v3.9.4' 

stages:
   - stage: Build
     displayName: Build
     jobs:
       - job: Build
         displayName: Build
         pool:
            vmImage: ubuntu-latest
         steps:
          - checkout: self
            clean: true
            fetchDepth: 1
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled
          - script: | 
             echo 'Maven version:'
              mvn -version
            displayName: Show maven Version
          
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
          - task: CopyFiles@2
            inputs:
              Contents: 'target/**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/target'

              
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerLink'
              repository: 'anand2993/webapp'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
   - stage: InstallDocker
     jobs:
      - job: InstallDocker
        displayName: 'Install Docker Engine'
        steps:
         - script: |
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce=$(DOCKER_VERSION)
           displayName: 'Install Docker Engine'

   - stage: Deploy
     displayName: Deploy
     jobs:
      - job: Run
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'DockerLink'
            repository: 'anand2993/webapp'
            command: 'run'
            arguments: '-d --name java-app -p 8080:8080'
      